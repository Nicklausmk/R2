#include "esp_camera.h"
#include <WiFi.h>
#include <WebServer.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const char* ssid = "AK";
const char* password = "dani58056";
const uint8_t LED_PIN = 2;
WebServer server(80);
LiquidCrystal_I2C lcd(0x27, 16, 2);

void handleRoot() {
  String html = "<html><body>";
  html += "<div style=\"text-align:center\">";
  html += "<img src=\"/stream\" style=\"width:50%;\">";
  html += "<br><button onclick=\"rotateImage()\">Rotate Image</button>";
  html += "<br><button onclick=\"fetch('/led').then(response => response.text().then(data => console.log(data)))\">Toggle LED</button>";
  html += "</div>";
  html += "<script>";
  html += "function rotateImage() {";
  html += "  var img = document.getElementsByTagName('img')[0];";
  html += "  var currentRotation = parseInt(img.style.transform.replace('rotate(', ''));";
  html += "  img.style.transform = 'rotate(' + (currentRotation + 90) + 'deg)';";
  html += "}";
  html += "</script>";
  html += "</body></html>";

  server.send(200, "text/html", html);
}

void handleStream() {
  WiFiClient client = server.client();

  String response = "HTTP/1.1 200 OK\r\n";
  response += "Content-Type: multipart/x-mixed-replace; boundary=frame\r\n\r\n";
  server.sendContent(response);

  while (true) {
    camera_fb_t *fb = esp_camera_fb_get();
    if (!fb) {
      Serial.println("Camera capture failed");
      server.client().stop();
      return;
    }

    String frame = "--frame\r\nContent-Type: image/jpeg\r\n\r\n";
    server.sendContent(frame);
    server.sendContent((const char*)fb->buf, fb->len);
    server.sendContent("\r\n");

    esp_camera_fb_return(fb);
  }
}

void handleLED() {
  digitalWrite(LED_PIN, !digitalRead(LED_PIN));
  server.send(200, "text/plain", "LED toggled");
}

void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  if (psramFound()) {
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
  
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }
  
  WiFi.begin(ssid, password);
while (WiFi.status() != WL_CONNECTED) {
  delay(1000);
  lcd.print("Connecting to WiFi...");
}
lcd.clear();
lcd.print("Connected to WiFi");

server.on("/", HTTP_GET, handleRoot);
server.on("/stream", HTTP_GET, handleStream);
server.on("/led", HTTP_GET, handleLED);

server.begin();
lcd.clear();
lcd.print("Web server started");

Serial.print("Camera Ready! Use 'http://");
Serial.print(WiFi.localIP());
Serial.println("' to connect");

void toggleLED() {
  static bool ledOn = false; // keep track of the LED state
  ledOn = !ledOn; // toggle the state
  
  digitalWrite(LED_PIN, ledOn ? HIGH : LOW); // turn the LED on or off
}
void loop() {
  server.handleClient();
}
